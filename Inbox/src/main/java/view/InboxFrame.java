/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.InboxDAO;
import controller.InboxDB;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.MMS;
import model.Message;

/**
 * This class is the main frame of the application, it is used to input Message
 * for a user and save that to the database.
 * @author Solly Vinson
 */
public class InboxFrame extends javax.swing.JFrame {
    /**
     * Creates new form InboxFrame
     */
    public InboxFrame() {
        initComponents();
        
        //Create an event listener for the JTextArea to count the number of words typed
        event ta=new event();
        txtMessage.addKeyListener(ta);
        //Disable some labels and button 
        lblGrp.setVisible(false);        
        lblSent.setVisible(false);
        lblRecd.setVisible(false);
        btnViewSelected.setEnabled(false);
    }
    
    /**
     * This event is invoked when the user types in a message in the txtMessage 
     */
    public class event implements KeyListener{

        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
        }
        
        /**
         * This event is invoked when the user has finished typing in the txtMessage
         * @param e
         * This method is to calculate the no of words entered in the txtMessage
         * so as to enable the Group of messages checkbox
         */
        @Override
        public void keyReleased(KeyEvent e) {
            //Get the length of the Message
            int message_ct=txtMessage.getText().length();
            
            //If the word count is >=100, the check box for 'Group of Messages' is selected 
            if(message_ct>=100){
                chkGrpOfMesg.setSelected(true);
                lblGrp.setForeground(Color.red);
                lblGrp.setVisible(true);
            }
            else{
                chkGrpOfMesg.setSelected(false);
                lblGrp.setVisible(false);
            }
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnAudio = new javax.swing.JButton();
        txtTo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnGallery = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        btnVideo = new javax.swing.JButton();
        btnSend = new javax.swing.JButton();
        txtFilePath = new javax.swing.JTextField();
        lblGrp = new javax.swing.JLabel();
        btnView = new javax.swing.JButton();
        btnViewSelected = new javax.swing.JButton();
        chkGrpOfMesg = new javax.swing.JCheckBox();
        chkSent = new javax.swing.JCheckBox();
        chkRecvd = new javax.swing.JCheckBox();
        btnClear = new javax.swing.JButton();
        lblSent = new javax.swing.JLabel();
        lblRecd = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMessages = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inbox");
        setBackground(new java.awt.Color(102, 0, 102));

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Inbox");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(494, 494, 494)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(14, 14, 14))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        btnAudio.setIcon(new javax.swing.ImageIcon("C:\\Users\\Student\\Downloads\\audio-icon.png")); // NOI18N
        btnAudio.setToolTipText("Upload Audio ");
        btnAudio.setBorder(null);
        btnAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAudioActionPerformed(evt);
            }
        });

        jLabel2.setText("Sender Name");

        jLabel3.setText("Recipient Name");

        btnGallery.setIcon(new javax.swing.ImageIcon("C:\\Users\\Student\\OneDrive - City of Dublin ETB\\Documents\\NetBeansProjects\\icons\\camera.png")); // NOI18N
        btnGallery.setToolTipText("Upload Picture");
        btnGallery.setBorder(null);
        btnGallery.setMaximumSize(new java.awt.Dimension(28, 28));
        btnGallery.setMinimumSize(new java.awt.Dimension(28, 28));
        btnGallery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGalleryActionPerformed(evt);
            }
        });

        txtMessage.setColumns(20);
        txtMessage.setRows(5);
        jScrollPane1.setViewportView(txtMessage);

        btnVideo.setIcon(new javax.swing.ImageIcon("C:\\Users\\Student\\OneDrive - City of Dublin ETB\\Documents\\NetBeansProjects\\icons\\video-icon.png")); // NOI18N
        btnVideo.setToolTipText("Upload Video");
        btnVideo.setBorder(null);
        btnVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVideoActionPerformed(evt);
            }
        });

        btnSend.setText("Send Message");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        lblGrp.setText("Word Limit-100 words");

        btnView.setText("View All Messages");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnViewSelected.setText("View Selected Message");
        btnViewSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSelectedActionPerformed(evt);
            }
        });

        chkGrpOfMesg.setText("Group of Messages");
        chkGrpOfMesg.setEnabled(false);

        chkSent.setText("Sent");
        chkSent.setEnabled(false);

        chkRecvd.setText("Recieved");
        chkRecvd.setEnabled(false);

        btnClear.setText("Clear Message");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblSent.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSent.setForeground(new java.awt.Color(0, 102, 0));
        lblSent.setText("Message Sent");

        lblRecd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRecd.setForeground(new java.awt.Color(0, 102, 0));
        lblRecd.setText("Message Received");

        jLabel4.setText("Message");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGallery, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilePath))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(chkGrpOfMesg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblGrp, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                                    .addComponent(txtTo)))
                            .addComponent(jScrollPane1))))
                .addGap(20, 20, 20))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 3, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnViewSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(chkSent)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chkRecvd)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblSent)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblRecd)))))))
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(17, 17, 17)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkGrpOfMesg)
                    .addComponent(lblGrp))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGallery, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkSent)
                    .addComponent(chkRecvd)
                    .addComponent(lblSent)
                    .addComponent(lblRecd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tblMessages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Sender", "Recipient", "Message", "Type", "Filepath", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblMessages);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 19, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called to populate the table
     */
    public void LoadMsg(){
        // Gets a model property from the JTable, it must be downcast
        // from a TableModel to a DefaultTableModel so that
        // I can have an empty table before populating 
        // to avoid duplication of records everytime the 'View all Messages' button is clicked
        DefaultTableModel tableModel = (DefaultTableModel)tblMessages.getModel();
        tableModel.setRowCount(0);
        
        // Call the method from the DAO class that will return a list of
        // Message objects
        InboxDAO dao=new InboxDAO();
        
        // Get all messages via the DAO's list() method
        // and assigns that list to the global variable
        List<Message> listOfMessages=dao.list();
        try {                              
            // Loop through the list of message objects
            for (Message m : listOfMessages) {
                // Retrieve each field  or value for the message
                
                // id
                int id = m.getId();
                // sendername
                String senderName = m.getSender();
                //recipient name
                String recipientName=m.getRecipient();
                //message
                String msg=m.getMessage();
                //message status "S" for Sent,"R" for recieved
                String status=m.getStatus();
                //initialise msgtype and filepath
                String msgtype;
                String filepath="";
                boolean s;
                //The checkbox for status is checked if message status is Recieved 
                //not checked if it is only sent
                if("S".equals(status)){
                    s=false;
                }
                else{
                    s=true;
                }
                                
                //To get the filepath and msgtype in case of MMS message              
                if (m instanceof MMS mms) {
                    filepath=mms.getFilepath();
                    msgtype=mms.getMsgtype();                
                }
                else{
                    msgtype=m.getMsgtype();
                }

                // Add that message details to a row in the JTable on the form
                // Gets a model property from the JTable, it must be downcast
                // from a TableModel to a DefaultTableModel so that I can access
                // the addRow() method.
                DefaultTableModel model = (DefaultTableModel)tblMessages.getModel();
                // Add a new row to the JTable on the form
                model.addRow( new Object[] {id, senderName,recipientName,msg,msgtype,filepath,s});               
            }   
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                    "Error selecting from the database", "Error", 
                    JOptionPane.ERROR_MESSAGE);
        }        
    }
    
    /**
    * This method saves a Message to the database, it will call a method
    * in the DAO class to save to the database.
    */
    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        //First to check if the fields are empty
        if (txtFrom.getText().isEmpty() || txtTo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                    "Cannot have sender or recipient name empty", 
                    "Error - empty fields", JOptionPane.ERROR_MESSAGE);
        }else{
        //if sender name and recipient name are entered
        //Get all the field inputs
        
        //Get sender
        String senderName=txtFrom.getText();
        //Get recipient
        String recName=txtTo.getText();
        //Get message
        String msg_input=txtMessage.getText();
        //Assign  to "S" to message status  for Messgae Sent
        String status="S";
        //Get filepath
        String filepath=txtFilePath.getText();
              
        Message m;
        //See if it is a text message or MMS messages
        //Accordingly create the correspondng object and pass it to the DAO class
        if((btnAudio.isSelected() || btnGallery.isSelected() ||btnVideo.isSelected()) && !filepath.isEmpty()){
            String msgtype="MMS";
            m=new MMS(senderName,recName,msg_input,status,msgtype,filepath);
            InboxDAO dao=new InboxDAO();   
        }else{
            String msgtype="Text";
            m=new Message(senderName,recName,msg_input,status,msgtype);       
        }
        InboxDAO dao=new InboxDAO();
        boolean success=dao.send(m);
        
        //To enable and disable certain components if the message was succesfully saved to the DB            
        if (success) {
            chkSent.setSelected(true);
            lblSent.setVisible(true);
            txtFrom.setEnabled(false);
            txtTo.setEnabled(false);
            txtMessage.setEnabled(false);
            btnAudio.setEnabled(false);
            btnVideo.setEnabled(false);
            btnGallery.setEnabled(false);
            txtFilePath.setEnabled(false);
            lblGrp.setVisible(false);
            btnSend.setEnabled(false);
            DefaultTableModel tableModel = (DefaultTableModel)tblMessages.getModel();
            tableModel.setRowCount(0);    
            LoadMsg();
            } else {
               JOptionPane.showMessageDialog(this, 
                    "Error inserting Message", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }  
    }//GEN-LAST:event_btnSendActionPerformed

    /**
     * This method is called when user selects the Audio button
     * which will invoke file open dialog for selecting an Audio file
     */
    private void btnAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAudioActionPerformed
        btnAudio.setSelected(true);
        JFileChooser chooser=new JFileChooser("C:\\Users\\Student\\Music");
        if (chooser.showDialog(this, "OK") == JFileChooser.APPROVE_OPTION) {
            // getSelectedFile() returns a File type which can be used to check
            // if the link/ file is a file or a directory.
            
            //Get the filepath and save it in variable filename
            String filename = chooser.getSelectedFile().toString();
            //Assign the filename to the textfield
            txtFilePath.setText(filename);
        }           
    }//GEN-LAST:event_btnAudioActionPerformed

    /**
     * This method is called when user selects the Photo Gallery button
     * which will invoke file open dialog for selecting an Picture file
     */
    private void btnGalleryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGalleryActionPerformed
        btnGallery.setSelected(true);
        JFileChooser chooser=new JFileChooser("C:\\Users\\Student\\Pictures");
        if (chooser.showDialog(this, "OK") == JFileChooser.APPROVE_OPTION) {
            // getSelectedFile() returns a File type which can be used to check
            // if the link/ file is a file or a directory. 

            //Get the filepath and save it in variable filename
            String filename = chooser.getSelectedFile().toString();
            //Assign the filename to the textfield
            txtFilePath.setText(filename);
        }       
    }//GEN-LAST:event_btnGalleryActionPerformed

    /**
     * This method is called when user selects the Video button
     * which will invoke file open dialog for selecting an Picture file
     */
    private void btnVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVideoActionPerformed
        // TODO add your handling code here:
        btnVideo.setSelected(true);
        //btnAudio.setSelected(false);
        JFileChooser chooser=new JFileChooser("C:\\Users\\Student\\Videos");
          if (chooser.showDialog(this, "OK") == JFileChooser.APPROVE_OPTION) {
            // getSelectedFile() returns a File type which can be used to check
            // if the link/ file is a file or a directory. 
            
            //Get the filepath and save it in variable filename
            String filename = chooser.getSelectedFile().toString();
             //Assign the filename to the textfield
            txtFilePath.setText(filename);
          }
    }//GEN-LAST:event_btnVideoActionPerformed
    
    /**
     * This method is called when the 'View All Messages' button is clicked
     * This method will call the LoadMsg() method to populate all the messages
     */
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        //Check if the messages are already populated onto the table
        int row=tblMessages.getSelectedRow();
        int rowcount=tblMessages.getRowCount();
        if(rowcount<=1){
             LoadMsg();
        }
        else{
            JOptionPane.showMessageDialog(this, "No new messages to view","No new message",JOptionPane.INFORMATION_MESSAGE);
        }
        btnViewSelected.setEnabled(true);
    }//GEN-LAST:event_btnViewActionPerformed

    /**
     * This method is called when the 'View Selected Message' button is clicked
     * This method will display all the contents on the corresponding textfields
     */
    private void btnViewSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSelectedActionPerformed
        // Get which row is selected in the table
        int currentRow=tblMessages.getSelectedRow();
        
        // Make sure that a row is selected in the table
        if (currentRow < 0) {
            JOptionPane.showMessageDialog(this, 
                    "Please select a message from the table", 
                    "Please select Message", 
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                // Retrieve the data from the selected row of the table
                // and populate the form with the details from the current row
                TableModel model=tblMessages.getModel();                               
                txtFrom.setText(model.getValueAt(currentRow, 1).toString());
                txtTo.setText(model.getValueAt(currentRow,2).toString());
                txtMessage.setText(model.getValueAt(currentRow,3).toString());
                txtFilePath.setText(model.getValueAt(currentRow,5).toString());
                String status=model.getValueAt(currentRow,6).toString();
                
                //Get the id of the selected message so that we can update the mesage status in the DB using the id
                int id=(int) model.getValueAt(currentRow,0);
                
                //Change the checked state of the Recieved and the Send button
                chkRecvd.setSelected(true);
                lblRecd.setVisible(true);
                chkSent.setSelected(false);
                
                //Connect to the DB
                Connection con=InboxDB.getConnection();
                //Assign value "R" for Recieved Message
                String new_status="R";
                
                //Run a SQL query to update the status to "R" for the corresponding row with matching id
                String sql="UPDATE message_details SET status='"+new_status+"' WHERE id='"+id+"'";
                PreparedStatement ps=con.prepareStatement(sql);
                ps.executeUpdate();
                
                //Disable all the tetfields from any updation
                txtFrom.setEnabled(false);
                txtTo.setEnabled(false);
                txtMessage.setEnabled(false);
                btnAudio.setEnabled(false);
                btnVideo.setEnabled(false);
                btnGallery.setEnabled(false);
                txtFilePath.setEnabled(false);
                lblSent.setVisible(false);                
                model.setValueAt(true,currentRow, 6);
                btnSend.setEnabled(false);
                
                //Get the no of words in the Message textarea to enable the checkbox for Group of messages
                int message_ct=txtMessage.getText().length();              
                if(message_ct>=100){
                    chkGrpOfMesg.setSelected(true);
                }
                else{
                    chkGrpOfMesg.setSelected(false);
                }        
            } catch (Exception ex) {
                Logger.getLogger(InboxFrame.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_btnViewSelectedActionPerformed

    /**
     * This method is invoked when the Clear button is clicked
     * This is method will clear all the fields and enable all the buttons
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtFrom.setText("");
        txtTo.setText("");
        txtMessage.setText("");
        txtFilePath.setText("");
        chkSent.setSelected(false);
        chkRecvd.setSelected(false);
        chkGrpOfMesg.setSelected(false);
        txtFrom.setEnabled(true);
        txtTo.setEnabled(true);
        txtMessage.setEnabled(true);
        btnAudio.setEnabled(true);
        btnVideo.setEnabled(true);
        btnGallery.setEnabled(true);
        txtFilePath.setEnabled(true);  
        btnSend.setEnabled(true);
        lblGrp.setVisible(false);
        lblSent.setVisible(false);
        lblRecd.setVisible(false);
        btnViewSelected.setEnabled(false);
        //Clear the table contents
        DefaultTableModel tableModel = (DefaultTableModel)tblMessages.getModel();
        tableModel.setRowCount(0);            
    }//GEN-LAST:event_btnClearActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InboxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InboxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InboxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InboxFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InboxFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAudio;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnGallery;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnVideo;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnViewSelected;
    private javax.swing.JCheckBox chkGrpOfMesg;
    private javax.swing.JCheckBox chkRecvd;
    private javax.swing.JCheckBox chkSent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblGrp;
    private javax.swing.JLabel lblRecd;
    private javax.swing.JLabel lblSent;
    private javax.swing.JTable tblMessages;
    private javax.swing.JTextField txtFilePath;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextArea txtMessage;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables
}
